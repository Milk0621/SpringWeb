<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.newlecture.web.dao.NoticeDAO">

	<select id="getViewList" resultType="com.newlecture.web.entity.NoticeView">
		select * from noticeview 
		<trim prefix="where" prefixOverrides="and | or"> 
			<if test="query != null and query != ''">
				${field} like concat('%', #{query}, '%')
			</if>
				and pub = #{pub}
		</trim> 
		order by regdate desc 
		limit #{offset}, #{size}
	</select>
  	<select id="getCount">
  		select count(id) cnt from notice
  		<where>
			${field} like concat('%', #{query}, '%')
		</where>
  	</select>
  	<select id="getView" resultType="com.newlecture.web.entity.NoticeView">
  		select * from noticeview 
  		where id = #{id}
  	</select>
  	
  	<select id="getNext" resultType="com.newlecture.web.entity.Notice">
  		select * from notice
		where regdate &gt; (select regdate from notice where id = #{id})
		limit 1
  	</select>
  	<select id="getPrev" resultType="com.newlecture.web.entity.Notice">
  		select * from notice
		where regdate &lt; (select regdate from notice where id = #{id})
		order by regdate desc limit 1
  	</select>
  	
  	<update id="update" parameterType="com.newlecture.web.entity.Notice">
  		update notice
  		<set>
  			title = #{title},
  			content = #{content},
  			hit = #{hit},
  			pub = #{pub}
  		</set>
  		where id = #{id}
  	</update>
  	<insert id="insert" parameterType="com.newlecture.web.entity.Notice">
  		insert into notice(title, content, memberId)
  		values(#{title}, #{content}, #{memberId})
  	</insert>
  	<delete id="delete">
  		delete from notice
  		where id = #{id}
  	</delete>
  	
  	<delete id="deleteAll">
  		delete from notice
  		where
  		<foreach item="id" index="index" collection="ids"
	        open="id in (" separator="," close=")" nullable="true">
	          #{id}
	    </foreach>
  	</delete>
  	
  	<update id="updatePubAll">
  		update notice
  		<set>
  			pub = #{pub}
  		</set>
  		where
  		<foreach item="id" index="index" collection="ids"
	        open="id in (" separator="," close=")" nullable="true">
	          #{id}
	    </foreach>
  	</update>
  	
  	<!-- <update id="updatePubAll">
  		update notice
  		<set>
  			pub = 
  			case
  				<foreach item="id" collection="pubIds">
  					when id = #{id} then 1
  				</foreach>
  				<foreach item="id" collection="closeIds">
  					when id = #{id} then 0
  				</foreach>
			end
  		</set>
  		where id in (
  			<foreach item="id" separator="," collection="pubIds">
				#{id}
			</foreach>
			,
			<foreach item="id" separator="," collection="closeIds">
				#{id}
			</foreach>
  		)
  	</update> -->
  	
</mapper>